apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: build-container-with-kaniko
  namespace: ci
spec:
  templates:
  - name: build-from-git
    inputs:
      
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: build-container-with-buildkit
  namespace: ci
spec:
  arguments:
      parameters:
        - name: repo
          value: https://github.com/joao.rufino/imaginary
        - name: branch
          value: master
        - name: path
          value: .
        - name: image
          value: imaginary 
        - name: tag
          value: v2
    entrypoint: main
    # We use a volume claim template so that we can have a shared workspace.
    volumeClaimTemplates:
      - metadata:
          name: work
        spec:
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 64Mi
    templates:
      - name: main
        dag:
          tasks:
            - name: clone
              template: clone
              arguments:
                parameters:
                  - name: repo
                    value: "{{`{{workflow.parameters.repo}}`}}"
                  - name: branch
                    value: "{{`{{workflow.parameters.branch}}`}}"
            - name: build
              template: build
              arguments:
                parameters:
                  - name: path
                    value: "{{`{{workflow.parameters.path}}`}}"
              depends: "clone"
            - name: image
              template: image
              arguments:
                parameters:
                  - name: path
                    value: "{{`{{workflow.parameters.path}}`}}"
                  - name: image
                    value: "{{`{{workflow.parameters.image}}`}}"
              depends: "build"
      - name: clone
        inputs:
          parameters:
            - name: repo
            - name: branch
        container:
          volumeMounts:
            - mountPath: /work
              name: work
          image: alpine/git:v2.26.2
          workingDir: /work
          # Do a shallow clone, which is the fastest way to clone, by using the
          # --depth, --branch, and --single-branch options
          args:
            - clone
            - --depth
            - "1"
            - --branch
            - "{{`{{inputs.parameters.branch}}`}}"
            - --single-branch
            - "{{`{{inputs.parameters.repo}}`}}"
            - .
      - name: build
        inputs:
          parameters:
            - name: path
        container:
          image: golang:1.13
          volumeMounts:
            - mountPath: /work
              name: work
          workingDir: /work/{{`{{inputs.parameters.path}}`}}
          env:
            # Because this is not a Gomodule, we must turn modules off.
            - name: GO111MODULE
              value: "off"
          command:
            - go
          args:
            - build
            - -v
            - --build-arg
            - IMAGINARY_VERSION=
            - {{`{{inputs.parameters.tag}}` }}
            - -o
            - bin/imaginary
            - ./...
      - name: image
        inputs:
          parameters:
            - name: image 
            - name: tag 
        # Mount the configuration so we can push the image.
        # This should create the /.docker/config.json file.
        volumes:
          - name: docker-config
            secret:
              secretName: docker-config
        container:
          image: gcr.io/kaniko-project/executor:debug
          imagePullPolicy: Always
          args:
          - --destination=docker.pkg.github.com/joaorufino/repository/{{`{{inputs.parameters.image}}`}}:{{`{{inputs.parameters.tag}}`}}
          volumeMounts:
            - name: kaniko-docker-config
              mountPath: /kaniko/.docker/
